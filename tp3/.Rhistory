knitr::opts_chunk$set(echo = FALSE)
glass_df = read.csv("glass.csv", header = FALSE)
colnames(glass_df) <- c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
glass_df$Type <- as.character(glass_df$Type)
glass_df <- glass_df[sample(nrow(glass_df)),]
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v)
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
glass_df = read.csv("glass.csv", header = FALSE)
colnames(glass_df) <- c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
glass_df$Type <- as.character(glass_df$Type)
glass_df <- glass_df[sample(nrow(glass_df)),]
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v)
ylim=c(0,1)
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
glass_df = read.csv("glass.csv", header = FALSE)
colnames(glass_df) <- c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
glass_df$Type <- as.character(glass_df$Type)
glass_df <- glass_df[sample(nrow(glass_df)),]
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v, ylim=c(0,1))
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
?knn
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(echo = FALSE)
glass_df = read.csv("glass.csv", header = FALSE)
colnames(glass_df) <- c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
glass_df$Type <- as.character(glass_df$Type)
glass_df <- glass_df[sample(nrow(glass_df)),]
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v, ylim=c(0,1))
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
knitr::opts_chunk$set(echo = FALSE)
glass_df = read.csv("glass.csv", header = FALSE)
colnames(glass_df) <-
c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
glass_df$Type <- as.character(glass_df$Type)
glass_df <- glass_df[sample(nrow(glass_df)),]
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v, ylim=c(0,1))
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
knitr::opts_chunk$set(echo = FALSE)
### Cargamos el data set en un data frame
glass_df = read.csv("glass.csv", header = FALSE)
### Le ponemos los nombres a las columnas de acuerdo a la documentación del data set
colnames(glass_df) <-
c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
### transformamos la columna de clasificación a string
glass_df$Type <- as.character(glass_df$Type)
### hacemos un shuffle de las filas del data frame para no incurrir
### en errores de inferencias triviales
glass_df <- glass_df[sample(nrow(glass_df)),]
### normalizamos los valores numéricos
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
### definimos un conjunto de datos para entrenamiento y otro para tests
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
### Realizamos "N_reps" repeticiones y calculamos la eficiencia promedio
### (que guardamos finalmente en un vector v)
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v, ylim=c(0,1))
### El gráfico muestra que no hay gran variación de la eficiencia en la clasificación cuando se varía el parámetro k.
### Calculamos la Crosstable para ver la eficiencia en la clasificación de cada clase y los errores cometidos.
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('activos.xls', sep='\t')
library(nycflights13)
#2)
toHouston<-subset(flights, (flights$dest == "IAH") | (flights$dest == "HOU"))
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('activos.xls', sep='\t')
data$Fecha <- as.Date(data$Fecha, format="%d/%m/%Y")
data$Primero <- as.numeric(gsub(",", ".", data$Primero))
data$Ultimo <- as.numeric(gsub(",", ".", data$Ultimo))
data$Minimo <- as.numeric(gsub(",", ".", data$Minimo))
data$Maximo <- as.numeric(gsub(",", ".", data$Maximo))
data
data$Posicion <- gsub(" ", "", data$Posicion)
activos <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "RFX20062019") | (gsub(" ", "", data$Posicion) == "ORO052019"))
activos
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
posiciones <- activos$Posicion
dataSinPosicion <- activos[-2]
library(Hmisc)
OHLC <- activos[5:8]
OHLC
OHLC <- impute(OHLC)
dataNorm <- as.data.frame(lapply(OHLC, scale))
plot(dataNorm$Ultimo, dataNorm$Fecha, main="Todas las posiciones")
activos
dataNorm
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Fecha, dolares$Ultimo, main="Posiciones Activos")
dolares$Posicion
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
dolaresDesdeAbril <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 3) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeAbril
posiciones <- dolaresDesdeAbril$Posicion
dataSinPosicion <- dolaresDesdeAbril[-2]
OHLC <- dolaresDesdeAbril[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeAbril$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
knitr::opts_chunk$set(echo = FALSE)
### Cargamos el data set en un data frame
glass_df = read.csv("input_files/glass.csv", header = FALSE)
### Le ponemos los nombres a las columnas de acuerdo a la documentación del data set
colnames(glass_df) <-
c("id", "RI", "Na", "Mg", "Al", "Si", "K", "Ca", "Ba", "Fe", "Type")
### transformamos la columna de clasificación a string
glass_df$Type <- as.character(glass_df$Type)
### hacemos un shuffle de las filas del data frame para no incurrir
### en errores de inferencias triviales
glass_df <- glass_df[sample(nrow(glass_df)),]
### normalizamos los valores numéricos
normalize <- function(x) {
return ((x-min(x))/(max(x)-min(x)))
}
glass_df_n <- as.data.frame(lapply(glass_df[2:10], normalize))
### definimos un conjunto de datos para entrenamiento y otro para tests
glass_df_n_train = glass_df_n[1:100,]
glass_df_n_test = glass_df_n[101:214,]
train_types = glass_df[1:100, "Type"]
test_types = glass_df[101:214, "Type"]
### Realizamos "N_reps" repeticiones y calculamos la eficiencia promedio
### (que guardamos finalmente en un vector v)
library(class)
v = rep(0, 15)
N_reps = 10
for (j in 1:N_reps){
for (k in 1:15){
data_test_pred <- knn(train=glass_df_n_train, test=glass_df_n_test, cl=train_types, k=k)
v[k] <- v[k] + sum(data_test_pred == test_types) / length(test_types)
}
}
v <- v/N_reps
plot(1:15, v, ylim=c(0,1))
### El gráfico muestra que no hay gran variación de la eficiencia en la clasificación cuando se varía el parámetro k.
### Calculamos la Crosstable para ver la eficiencia en la clasificación de cada clase y los errores cometidos.
library(gmodels)
CrossTable(x=test_types, y=data_test_pred, prop.chisq = FALSE)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('input_files/activos.xls', sep='\t')
data$Fecha <- as.Date(data$Fecha, format="%d/%m/%Y")
data$Primero <- as.numeric(gsub(",", ".", data$Primero))
data$Ultimo <- as.numeric(gsub(",", ".", data$Ultimo))
data$Minimo <- as.numeric(gsub(",", ".", data$Minimo))
data$Maximo <- as.numeric(gsub(",", ".", data$Maximo))
data
data$Posicion <- gsub(" ", "", data$Posicion)
activos <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "RFX20062019") | (gsub(" ", "", data$Posicion) == "ORO052019"))
activos
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
posiciones <- activos$Posicion
dataSinPosicion <- activos[-2]
library(Hmisc)
OHLC <- activos[5:8]
OHLC
OHLC <- impute(OHLC)
dataNorm <- as.data.frame(lapply(OHLC, scale))
plot(dataNorm$Ultimo, dataNorm$Fecha, main="Todas las posiciones")
activos
dataNorm
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Fecha, dolares$Ultimo, main="Posiciones Activos")
dolares$Posicion
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
dolaresDesdeAbril <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 3) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeAbril
posiciones <- dolaresDesdeAbril$Posicion
dataSinPosicion <- dolaresDesdeAbril[-2]
OHLC <- dolaresDesdeAbril[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeAbril$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('input_files/activos.xls', sep='\t')
data$Fecha <- as.Date(data$Fecha, format="%d/%m/%Y")
data$Primero <- as.numeric(gsub(",", ".", data$Primero))
data$Ultimo <- as.numeric(gsub(",", ".", data$Ultimo))
data$Minimo <- as.numeric(gsub(",", ".", data$Minimo))
data$Maximo <- as.numeric(gsub(",", ".", data$Maximo))
data
data$Posicion <- gsub(" ", "", data$Posicion)
activos <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "RFX20062019") | (gsub(" ", "", data$Posicion) == "ORO052019"))
activos
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
posiciones <- activos$Posicion
dataSinPosicion <- activos[-2]
library(Hmisc)
OHLC <- activos[5:8]
OHLC
OHLC <- impute(OHLC)
dataNorm <- as.data.frame(lapply(OHLC, scale))
plot(dataNorm$Ultimo, dataNorm$Fecha, main="Todas las posiciones")
activos
dataNorm
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Fecha, dolares$Ultimo, main="Posiciones Activos")
dolares$Posicion
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
dolaresDesdeAbril <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 3) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeAbril
posiciones <- dolaresDesdeAbril$Posicion
dataSinPosicion <- dolaresDesdeAbril[-2]
OHLC <- dolaresDesdeAbril[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeAbril$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
