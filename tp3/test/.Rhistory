data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- dataNorm$Posicion[1:limiteInf]
data_test_labels <- dataNorm$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
data_train_labels
dataNorm
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
#Filtramos solo 3 grupos de activos: DLR052019, DLR082019 y DLR122019
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolarFiltro <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolarFiltro$Volumen, dolarFiltro$Fecha, main="Posiciones Activos")
dolarFiltro$Posicion
dolarFiltro
#Sacamos ahora las posiciones del set de datos a procesar y las almacenamos.
posiciones <- dolarFiltro$Posicion
dataSinPosicion <- dolarFiltro[-2]
#Normalizamos los valores de la columna Ultimo
library(Hmisc)
dolarFiltro2 <- dolarFiltro[5:8]
dolarFiltro2 <- impute(dolarFiltro2)
dolarFiltroNormalizado <- as.data.frame(lapply(dolarFiltro2, scale))
plot(dolarFiltroNormalizado$Primero, dolarFiltroNormalizado$Ultimo, main="Todas las posiciones")
plot(dolares$Volumen, dolares$Fecha, main="Posiciones Activos")
dolarFiltro$Posicion
#Filtramos solo 3 grupos de activos: DLR052019, DLR082019 y DLR122019
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Volumen, dolares$Fecha, main="Posiciones Activos")
dolares$Posicion
dolares
#Sacamos ahora las posiciones del set de datos a procesar y las almacenamos.
posiciones <- dolares$Posicion
#Sacamos ahora las posiciones del set de datos a procesar y las almacenamos.
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
#Normalizamos los valores de la columna Ultimo
library(Hmisc)
#Filtramos solo 3 grupos de activos: DLR052019, DLR082019 y DLR122019
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Volumen, dolares$Fecha, main="Posiciones Activos")
dolares$Posicion
dolares
#Sacamos ahora las posiciones del set de datos a procesar y las almacenamos.
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
#Normalizamos los valores de la columna Ultimo
library(Hmisc)
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(dolares, scale))
plot(dataNor$Primero, dataNor$Ultimo, main="Todas las posiciones")
OHLC
OHLC
#Normalizamos los valores de la columna Ultimo
library(Hmisc)
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
plot(dataNor$Primero, dataNor$Ultimo, main="Todas las posiciones")
OHLC
OHLC
OHLC$Ultimo
OHLC
#Tomamos 1000 valores aleatorios del dataset para usar como train data
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=35)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
#Normalizamos los valores de la columna Ultimo
library(Hmisc)
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
plot(dataNor$Primero, dataNor$Ultimo, main="Todas las posiciones")
OHLC$Ultimo
OHLC
#Tomamos 1000 valores aleatorios del dataset para usar como train data
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=3)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
subset(dolares, dolares$Posicion == "DLR082019" |dolares$Posicion == "DLR122019")
subset(dolares, dolares$Posicion == "DLR052019")
knitr::opts_chunk$set(echo = TRUE)
data <- read.csv('activos.xls', sep='\t')
data <- read.csv('activos.xls', sep='\t')
data <- read.csv('activos.xls', sep='\t')
data
data$Fecha <- as.Date(data$Fecha, format="%d/%m/%Y")
data$Primero <- as.numeric(gsub(",", ".", data$Primero))
data$Ultimo <- as.numeric(gsub(",", ".", data$Ultimo))
data$Minimo <- as.numeric(gsub(",", ".", data$Minimo))
data$Maximo <- as.numeric(gsub(",", ".", data$Maximo))
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
activos <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "RFX20062019") | (gsub(" ", "", data$Posicion) == "ORO052019"))
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
activos <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "RFX20062019") | (gsub(" ", "", data$Posicion) == "ORO052019"))
data$Primero <- as.numeric(gsub(",", ".", data$Primero))
data$Ultimo <- as.numeric(gsub(",", ".", data$Ultimo))
data$Minimo <- as.numeric(gsub(",", ".", data$Minimo))
data$Maximo <- as.numeric(gsub(",", ".", data$Maximo))
data
activos
plot(activos$Ultimo, activos$Fecha, main="Posiciones Activos")
activos$Posicion
activos
plot(activos$Ultimo, activos$Fecha, main="Posiciones Activos")
activos$Posicion
plot(activos$Ultimo, activos$Fecha, main="Posiciones Activos")
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
plot(activos$Fecha, activos$Ultimo, main="Posiciones Activos")
posiciones <- activos$Posicion
dataSinPosicion <- activos[-2]
library(Hmisc)
OHLC <- activos[5:8]
OHLC
OHLC <- impute(OHLC)
dataNorm <- as.data.frame(lapply(OHLC, scale))
plot(dataNorm$Ultimo, dataNorm$Fecha, main="Todas las posiciones")
activos
dataNorm
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
library(Hmisc)
OHLC <- activos[5:8]
OHLC
OHLC <- impute(OHLC)
dataNorm <- as.data.frame(lapply(OHLC, scale))
plot(dataNorm$Ultimo, dataNorm$Fecha, main="Todas las posiciones")
activos
dataNorm
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test)/length(data_test)
}
limiteInf = round(length(dataNorm[,1])/4)
limiteSup = length(dataNorm[,1])
data_train <- dataNorm[1:limiteInf,]
data_test <- dataNorm[(limiteInf + 1):limiteSup,]
data_train_labels <- activos$Posicion[1:limiteInf]
data_test_labels <- activos$Posicion[(limiteInf+1):limiteSup]
data_train_labels
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=13)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test)/length(data_test)
}
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=1)
v[k] <- sum(data_test_pred == data_test)/length(data_test)
}
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test)/length(data_test)
}
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
v <- rep(0:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
v
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
v
data_test_pred
data_test_pred == data_test_labels
plot(1:k, v)
La eficiencia es pr\'acticamente la misma en el anterior caso.
La eficiencia es pr\'acticamente la misma en el anterior caso.
data$Posicion <- gsub(" ", "", data$Posicion)
data$Posicion
dolares <- subset(data, (gsub(" ", "", data$Posicion) == "DLR052019") | (gsub(" ", "", data$Posicion) == "DLR082019") | (gsub(" ", "", data$Posicion) == "DLR122019"))
plot(dolares$Ultimo, dolares$Fecha, main="Posiciones Activos")
dolares$Posicion
plot(dolares$Fecha, dolares$Ultimo, main="Posiciones Activos")
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
plot(dataNor$Primero, dataNor$Ultimo, main="Todas las posiciones")
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
posiciones <- dolares$Posicion
dataSinPosicion <- dolares[-2]
OHLC <- dolares[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolares$Posicion[1:limiteInf]
data_test_labels <- dolares$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
#dolaresDesdeEnero <- subset(dolares, montdolares$Fecha)
dolares$Fecha
#dolaresDesdeEnero <- subset(dolares, montdolares$Fecha)
format(dolares$Fecha,"%m")
dolaresDesdeEnero <- subset(dolares, format(dolares$Fecha, "%m") > 01 & fomat(dolares$Fecha, "%Y") == 2019)
dolaresDesdeEnero <- subset(dolares, format(dolares$Fecha, "%m") > 01 & format(dolares$Fecha, "%Y") == 2019)
dolaresDesdeEnero$Fecha
dolaresDesdeEnero <- subset(dolares, (format(dolares$Fecha, "%m") > 01) & (format(dolares$Fecha, "%Y") == 2019)
dolaresDesdeEnero
dolaresDesdeEnero <- subset(dolares, (format(dolares$Fecha, "%m") > 01) & (format(dolares$Fecha, "%Y" == 2019))
dolaresDesdeEnero
dolaresDesdeEnero <- subset(dolares, (format(dolares$Fecha, "%m") > 01) & (format(dolares$Fecha, "%Y") == 2019))
dolaresDesdeEnero
#dolaresDesdeEnero
format(dolares$Fecha, "%m") > 01
#dolaresDesdeEnero
format(dolares$Fecha, "%Y") == 2019
#dolaresDesdeEnero
format(dolares$Fecha, "%Y") == 2019 & format(dolares$Fecha, "%m") > 01
#dolaresDesdeEnero
(format(dolares$Fecha, "%Y") == 2019) & (format(dolares$Fecha, "%m") > 01)
dolares$Fecha
#dolaresDesdeEnero
(format(dolares$Fecha, "%Y") == 2019) & (format(dolares$Fecha, "%m") >= 01)
#dolaresDesdeEnero
(format(dolares$Fecha, "%Y") == 2019) and (format(dolares$Fecha, "%m") >= 01)
#dolaresDesdeEnero
(format(dolares$Fecha, "%Y") == 2019) & (format(dolares$Fecha, "%m") >= 01)
#dolaresDesdeEnero
(format(dolares$Fecha, "%Y") == 2019)# & (format(dolares$Fecha, "%m") >= 01)
#dolaresDesdeEnero
#(format(dolares$Fecha, "%Y") == 2019) &
(format(dolares$Fecha, "%m") >= 01)
dolares$Fecha
format(dolares$Fecha, "%m")
#dolaresDesdeEnero
#(format(dolares$Fecha, "%Y") == 2019) &
(format(dolares$Fecha, "%m") >= 01)
#dolaresDesdeEnero
#(format(dolares$Fecha, "%Y") == 2019) &
(format(dolares$Fecha, "%m") >= "01")
format(dolares$Fecha, "%m")*2
format(dolares$Fecha, "%m")*1.
format(dolares$Fecha, "%m")
as.numeric(format(dolares$Fecha, "%m"))
dolaresDesdeEnero
#dolaresDesdeEnero
as.numeric(format(dolares$Fecha, "%Y") == 2019) & as.numeric(format(dolares$Fecha, "%m") >= 01)
as.numeric(format(dolares$Fecha, "%Y"))
as.numeric(format(dolares$Fecha, "%Y")) == 2019
#dolaresDesdeEnero
as.numeric(format(dolares$Fecha, "%Y") == 2019) & as.numeric(format(dolares$Fecha, "%m") >= 1)
#dolaresDesdeEnero
as.numeric(format(dolares$Fecha, "%Y") == 2019) & as.numeric(format(dolares$Fecha, "%m")) >= 1
dolaresDesdeEnero <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 1) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeEnero
posiciones <- ddolaresDesdeEnero$Posicion
posiciones <- dolaresDesdeEnero$Posicion
dataSinPosicion <- dolaresDesdeEnero[-2]
OHLC <- dolaresDesdeEnero[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeEnero$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeEnero$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
dolaresDesdeEnero <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 3) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeEnero
posiciones <- dolaresDesdeEnero$Posicion
dataSinPosicion <- dolaresDesdeEnero[-2]
OHLC <- dolaresDesdeEnero[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeEnero$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeEnero$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
posiciones <- dolaresDesdeAbril$Posicion
dolaresDesdeAbril <- subset(dolares, (as.numeric(format(dolares$Fecha, "%m")) > 3) & (as.numeric(format(dolares$Fecha, "%Y")) == 2019))
dolaresDesdeAbril
posiciones <- dolaresDesdeAbril$Posicion
dataSinPosicion <- dolaresDesdeAbril[-2]
OHLC <- dolaresDesdeAbril[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/5
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeAbril$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(0:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(0:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(0:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(0:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(0:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v
k
plot(c(1:k), v)
plot(1:k, v)
length(k)
length(v)
length(k)
v <- rep(1:15)
for (k in 1:15){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(1:15)
for (k in 1:21){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
v <- rep(1:15)
for (k in 1:31){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
length(dolaresDesdeAbril$Posicion)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
posiciones <- dolaresDesdeAbril$Posicion
dataSinPosicion <- dolaresDesdeAbril[-2]
OHLC <- dolaresDesdeAbril[5:8]
OHLC <- impute(OHLC)
dataNor <- as.data.frame(lapply(OHLC, scale))
limiteInf = length(dataNor[,1])/4
limiteSup = length(dataNor[,1])
data_train <- dataNor[1:limiteInf,]
data_test <- dataNor[(limiteInf + 1):limiteSup,]
data_train_labels <- dolaresDesdeAbril$Posicion[1:limiteInf]
data_test_labels <- dolaresDesdeAbril$Posicion[(limiteInf+1):limiteSup]
library(class)
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=5)
library(gmodels)
CrossTable(x=data_test_labels, y=data_test_pred, prop.chisq = FALSE)
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
install.packages("rsconnect")
v <- rep(1:15)
for (k in 1:25){
data_test_pred <- knn(train=data_train, test=data_test, cl=data_train_labels, k=k)
v[k] <- sum(data_test_pred == data_test_labels)/length(data_test_labels)
}
plot(1:k, v)
library(nycflights13)
retardados<-subset(flights, flights$arr_delay > 120)
library(nycflights13)
flights <- nycflights13::flights
flights
retardados<-subset(flights, flights$arr_delay > 120)
retardados
hist(retardados$arr_delay, freq = F, main = "Histograma de Vuelos Retardados", xlim = c(0, 600), las = 1)
#2)
toHouston<-subset(flights, (flights$dest == "IAH") | (flights$dest == "HOU"))
toHouston
pie(table(toHouston$dest), freq = F, main = "Pie Vuelos a Houston")
#3)
unitedDeltaAmerican<-subset(flights, (flights$carrier == "AA") | (flights$carrier == "DL") | (flights$carrier == "UA"))
unitedDeltaAmerican$carrier
pie(table(unitedDeltaAmerican$carrier), main = "Pie Carriers")
#4)
departureJulioAgostoSeptiembre<-subset(flights, (flights$month == 7) | (flights$month == 8) | (flights$month == 9))
prueba<-subset(departureJulioAgostoSeptiembre, departureJulioAgostoSeptiembre$month == 9)
pie(table(departureJulioAgostoSeptiembre$month))
hist(table(departureJulioAgostoSeptiembre$month), freq = F, main = "", breaks = 2, las=1)
table(departureJulioAgostoSeptiembre$month)
prueba
#5)
retardados2<-subset(flights, (flights$arr_delay > 120) & (flights$dep_delay <= 0))
retardados2
hist(departureJulioAgostoSeptiembre$arr_delay, freq = F, main= "Histograma Demorados pero salieron a tiempo")
#6)
entreCeroYseis<-subset(flights, flights$dep_time <= 600)
entreCeroYseis
subset(entreCeroYseis, entreCeroYseis$dep_time < 100)
hist((entreCeroYseis$dep_time), freq = F, main = "")
